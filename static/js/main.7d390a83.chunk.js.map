{"version":3,"sources":["components/Navbar.js","components/Form.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navdar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","Form","useState","text","setText","style","backgroundColor","heading","value","onChange","event","target","rows","col","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutTxt","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","txtCol","settxtCol","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7d390a83.chunk.js","sourcesContent":["import React from 'react';\r\n// import {Link} from 'react-router-dom';\r\n\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navdar(props) {\r\n    return (\r\n        <div>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\"> {props.title} </a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">{props.aboutTxt}</a>\r\n        </li> */}\r\n    \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n\r\n    <div className={`form-check form-switch text-light text-${props.mode==='light'?'dark':'light'}`}>\r\n      <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n      <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n    </div>\r\n    </div>\r\n  </div>\r\n </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavdar.propTypes = {\r\n                  title: PropTypes.string.isRequired,\r\n                  aboutTxt: PropTypes.string.isRequired\r\n                };\r\n\r\nNavdar.defaultProps={\r\n    title:'Set title here',\r\n    aboutTxt:'About text here'\r\n};       ","import React, {useState} from 'react'\r\n\r\nexport default function Form(props) {\r\n\r\n    const handleUpClick=()=>{\r\n        // console.log(\"UpperCase was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to upper case\",\"success\")\r\n    }\r\n\r\n    const handleLowerClick=()=>{\r\n        // console.log(\"UpperCase was clicked\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lower case\",\"success\");\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleClearClick=()=>{\r\n        // console.log(\"UpperCase was clicked\");\r\n        let newText='';\r\n        setText(newText);\r\n        props.showAlert(\"Text has been clear\",\"success\");\r\n\r\n    }\r\n\r\n    const handleCopy=()=>{\r\n        let text=document.getElementById('myBox');\r\n        text.select();\r\n        // text.setSelectionRange(0,9999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Whole text has been copy\",\"success\");\r\n\r\n    }\r\n\r\n    const handleExtraSpace=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removing extra spaces\",\"success\");\r\n    }\r\n\r\n    \r\n    const [text,setText] = useState('');\r\n\r\n    \r\n    // text=\"Hello\"; Wrong way to change the state\r\n    // setText(\"new text\"); \r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <div className={`container text-${props.mode==='dark'?'white':'dark'}`} style={{backgroundColor: props.mode==='dark'?'grey':'white'}} >\r\n                <h1>{props.heading}</h1>\r\n                <textarea className={`form-control  text-${props.mode==='dark'?'white':'dark'}`} value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white'}} id=\"myBox\" rows=\"10\" col=\"10\"></textarea>\r\n            </div>\r\n\r\n            <button className=\"btn btn-primary my-4 mx-3\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n            <button className=\"btn btn-success my-4 mx-3\" onClick={handleLowerClick}>Convert to Lower Case</button>\r\n            <button className=\"btn btn-secondary my-4 mx-3\" onClick={handleClearClick}>To Clear Text</button>\r\n            <button className=\"btn btn-warning my-4 mx-3\" onClick={handleCopy}>Copy</button>\r\n            <button className=\"btn btn-danger my-4 mx-3\" onClick={handleExtraSpace}>Remove Extra Space</button>\r\n            \r\n        <div className={`container my-4 text-${props.mode==='dark'?'white':'dark'}`}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(' ').length} words and {text.length} character</p>\r\n            <p>required {0.008*text.split(' ').length} min to read this paragraph</p>\r\n            <h2>Preview</h2>\r\n            <p>{text}</p>\r\n        </div>\r\n        </div>    \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word) =>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n    \r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","\nimport './App.css';\n\nimport Navbar from './components/Navbar'\n\nimport Form from './components/Form'\n// import About from './components/About';\nimport Alert from './components/Alert'\n\nimport React, { useState } from 'react';\n\n// import {\n//   BrowserRouter as Router,\n//   Route,\n// } from \"react-router-dom\";\n\n\n// import {\n//   Switch,\n// } from \"react-router\";\n\nfunction App() {\n  const [mode, setMode] = useState('light') // Whether dark mode is enabled or not\n  const [alert,setAlert]=useState(null);\n  const [txtCol, settxtCol] = useState(null);\n\n  const  showAlert = (message,type)=>{\n\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(()=>{\n      setAlert(null);\n    },2000)\n  \n  }\n\n  const toggleMode = ()=>{\n\n    if(mode === 'light'){\n      setMode('dark');\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.body.style.backgroundColor = '#042743';\n      settxtCol('white');\n      document.title = 'TextUtils-Dark Mode'\n    }\n    else{\n      document.body.style.backgroundColor = 'white';\n      setMode('light');\n      showAlert(\"Light mode has been enabled\",\"success\");\n      settxtCol('blue');\n      document.title = 'TextUtils-Light Mode';\n    }\n  }\n\n  return (\n  <>\n  {/* <Router> */}\n    {/* <Navbar title=\"TextUtils\" aboutTxt=\"About Us\"/> \\*/}\n\n    <Navbar title=\"TextUtils\" aboutTxt=\"About\" mode={mode} toggleMode={toggleMode} />\n\n    <Alert alert={alert}/>\n\n    <div className=\"conianer my-3\">\n    {/* <Switch> */}\n          {/* <Route exact path=\"/about\"> */}\n          {/* <About/> */}\n          {/* </Route> */}\n\n          {/* <Route exact path=\"/\"> */}\n          <Form showAlert={showAlert} mode={mode} txtCol={txtCol} heading=\"Enter the text to analyze\"/>\n          {/* </Route> */}\n\n    {/* </Switch>  */}\n    </div>\n  {/* </Router> */}\n  \n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}